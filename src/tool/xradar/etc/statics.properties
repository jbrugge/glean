system.label=${src.project.name}
version.label=
date.label=

version.home=${project.home}
docs.home=${gen.report.dir}
target.classes=${bin.dir}
target.source=${src.dir}

## This is a minimal system configuration file. Override this with one
## specific to your system to get the most out of XRadar
radar.config=${tool.basedir}/minimal-radar-config.xml

## Set pmd the rulesets for the system
pmd.analysis.rulesetfiles=${pmd.rulesets}

## Set pmd-cpd the minimum token count to qualify for a duplication
cpd.analysis.minimum.token.count=75

## Set checkstyle style config for the system
checkstyle.analysis.checks=${checkstyle.config}

## OPTIONAL : If you want coupling analysis. Set to true. For large systems, this may require quite a lot of performance. 
#coupling.analysis=true

## OPTIONAL : If you have a javadoc available, you can incorporate that as well. Else, comment out.
javadoc.report=true
javadoc.root=${gen.report.root}/javadoc

## OPTIONAL : If you want static class fileset analysis, set to true. Else, comment out.
## If bcc.analysis=true. Set the classes that are entrypoints to the system (bcc.analysis.critical.classes).
## This will be the basis of the classfileset that is generated. Default is set to all. This task currently only runs in unix/linux/cygwin
#bcc.analysis=true
#bcc.analysis.critical.classes=**/**.class

## OPTIONAL : If you have junit reports running and have an available report, set to true. Else, comment out.
junit.report.analysis=true
junit.report.file=${gen.report.root}/junitreport/TESTS-TestSuites.xml

## OPTIONAL : If you have cobertura reports running as part of your unit tests and have an available report, set to true. Else, comment out.
cobertura.report.analysis=true
cobertura.report.file = ${gen.report.root}/cobertura/coverage.xml
cobertura.report.root = ${gen.report.root}/cobertura

## OPTIONAL : If you have jcoverage reports running as part of your unit tests and have an available report, set to true. Else, comment out.
#jcoverage.report.analysis=true
#jcoverage.report.file=.../coverage_report.xml

## OPTIONAL : If you have sourcecontrol reports running as part of your unit tests and have an available report, set to true. Else, comment out.
## In Many cases this data is not available. You should comment this out when running the XRadar for the first
## time on your project.
#source.control.report.analysis=true
#source.control.report.file=${docs.home}/xml/source_control_report.xml

## OPTIONAL : Add your own properties here if you want to run your own system specific tasks from system_specific.xml
checkstyle.report.file  = ${gen.report.root}/checkstyle/${src.project.name}-checkstyle-feedback.xml
cobertura.report.file   = ${gen.report.root}/cobertura/coverage.xml
ckjm.report.file        = ${gen.report.root}/ckjm/${src.project.name}-ckjm-feedback.xml
cpd.report.file         = ${gen.report.root}/cpd/${src.project.name}-cpd-feedback.xml
depfind.report.file     = ${gen.report.root}/depfind/${src.project.name}-depfind-feedback.xml
findbugs.report.file    = ${gen.report.root}/findbugs/${src.project.name}-findbugs-feedback.xml
java2html.root          = ${gen.report.root}/java2html15
javancss.report.file    = ${gen.report.root}/javancss/${src.project.name}-javancss-feedback.xml
jdepend.report.file     = ${gen.report.root}/jdepend/${src.project.name}-jdepend-feedback.xml
pmd.report.file         = ${gen.report.root}/pmd/${src.project.name}-pmd-feedback.xml

