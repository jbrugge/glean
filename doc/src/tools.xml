<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <author email="john@jbrugge.com">John Brugge</author>
    <title>Glean : Tools</title>
  </properties>

<body>
<section name="Basic Tools">
<p>
The basic setup of Glean is meant to give you feedback that is easy to generate,
immediately useful to almost any project, and with the least reliance on other tools.
Start with this set to get a feel for Glean and for how you can incorporate the
feedback into your project team. If you find you want to add other feedback sources,
you can either use one of the scripts from Glean for any of the tools listed below
(simply list it in the <code>tool.pattern</code> property in your project configuration file),
or you can <a href="./adding.html">add support for another tool.</a>
</p>
<p>
These tools come with all of their dependent JARs packaged together. You can download
them using the links in the table, and then tell Glean about their install location
in the <code>toolhome.properties.local</code> file. 
</p>
<table class="bodyTable">
<th>Name</th><th>Description</th>
<tr class="a"><td><a href="http://www.java2html.com">java2html</a></td><td>Source code cross-reference in HTML</td></tr>
<tr class="a"><td><a href="http://java.sun.com/j2se/javadoc/">javadoc</a></td><td>Class API documentation</td></tr>
<tr class="a"><td><a href="http://www.kclee.de/clemens/java/javancss/">javancss</a></td><td>Source code metrics (LOC, McCabe Complexity)</td></tr>
<tr class="a"><td><a href="http://pmd.sourceforge.net">pmd</a></td><td>Static code analysis of style and design</td></tr>
</table>
</section>

<section name="All Tools">
<p>
Glean comes with scripts for a number of tools. Add any of these to your builds by 
downloading the tool and then including the name for the tool (from the table below) in 
the <code>tool.pattern</code> property for your project. Glean's script will then
run the tool using the same properties you specified for all of the other tools
(e.g. source location).
Any other tools or files you need for these is listed for each tool. For instance,
in order to run UmlGraph, you need to have <a href="http://www.graphviz.org">GraphViz</a> 
installed.
</p>
<p>
More is not necessarily
better, so start small and add feedback sources when you find that you can get
some benefit from their data.
</p>
<table class="bodyTable">
<th>Name</th><th>Description</th><th>JDK Level</th><th>Dependencies</th><th>Home</th>

            <tr class="a">
            <td><a href="#beandoc">beandoc</a></td>
            <td>Spring bean documentation</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://opensource.atlassian.com/confluence/spring/display/BDOC/Home">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#checkstyle">checkstyle</a></td>
            <td>Checks code against team style and design guidelines.</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://checkstyle.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#cobertura">cobertura</a></td>
            <td>Unit test coverage report</td>
            <td>1.4</td>
            <td>Optional Ant tasks (JUnit)</td>
            <td><a href="http://cobertura.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#cpd">cpd</a></td>
            <td>Report of copy/paste segments found in source</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://pmd.sourceforge.net/cpd.html">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#doccheck">doccheck</a></td>
            <td>Checks completion of JavaDoc comments</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://java.sun.com/j2se/javadoc/doccheck/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#emma">emma</a></td>
            <td>Unit test coverage report</td>
            <td>1.4</td>
            <td>Optional Ant tasks (JUnit)</td>
            <td><a href="http://emma.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#findbugs">findbugs</a></td>
            <td>Static code analysis for common programming errors</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://findbugs.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#jaranalyzer">jaranalyzer</a></td>
            <td>Component-level dependency analysis</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://www.kirkk.com/main/Main/JarAnalyzer">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#java2html14">java2html14</a></td>
            <td>Java source cross-reference in HTML</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://www.java2html.com">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#java2html15">java2html15</a></td>
            <td>Java source conversion to HTML</td>
            <td>1.5</td>
            <td>None</td>
            <td><a href="http://www.java2html.de">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#javadoc">javadoc</a></td>
            <td>Java API documentation</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://java.sun.com/j2se/javadoc/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#javancss">javancss</a></td>
            <td>Source code size and complexity metrics</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://www.kclee.de/clemens/java/javancss/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#jdepend">jdepend</a></td>
            <td>Report on package-level dependency metrics</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://clarkware.com/software/JDepend.html">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#junitreport">junitreport</a></td>
            <td>Creates a browsable report of testcase results</td>
            <td>1.4</td>
            <td>Optional Ant tasks (JUnit)</td>
            <td><a href="http://ant.apache.org/manual/OptionalTasks/junitreport.html">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#pmd">pmd</a></td>
            <td>Static analysis of source files using design and style rules</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://pmd.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#schemaspy">schemaspy</a></td>
            <td>Database schema and entity browser</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://schemaspy.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#statsvn">statsvn</a></td>
            <td>Statistical data from Subversion repository activity</td>
            <td>1.4</td>
            <td>Subversion command-line client</td>
            <td><a href="http://statsvn.org/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#umlgraph-doc">umlgraph-doc</a></td>
            <td>Javadoc with embedded UML class diagrams</td>
            <td>1.5</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://www.spinellis.gr/sw/umlgraph/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#umlgraph-views">umlgraph-views</a></td>
            <td>UML class diagrams from source code</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://www.spinellis.gr/sw/umlgraph/">Download</a></td>
            </tr>
    </table>
</section>

<section name="Tool Descriptions">
<p>
Each of the tools that Glean drives typically makes use of some of the 
<a href="./using.html#properties">basic common properties</a> of a project, 
such as the source, binary and library directories.
Many of them also have other properties that define what they do or how the produce
their output. All of them have reasonable default values that should work for most
people as they are, but if you want to customize any part of a tool, see the
description below or just dive into the source Ant script.
</p>
<p>
<h4><a name="beandoc">beandoc</a></h4>
Beandoc is a tool for documenting <a href="http://www.springframework.org">Spring</a>
bean configuration files. Most importantly, it describes and diagrams the relationships
between beans, with the bean definitions hyperlinked together.
</p>
<p>
This tool only appears to come in source form as of this writing (v0.7.1). Once
you have it downloaded, see the README. Building should be just running "ant dist"
from the command line.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>spring.config.pattern</td><td>**/*Context.xml</td><td>Naming style for your Spring files</td>
  </tr>
  <tr>
    <td>spring.config.dir</td><td>${src.dir}</td><td>Root of search path for config files</td>
  </tr>
</table>
</p>
<p>
<h4><a name="checkstyle">checkstyle</a></h4>
Checkstyle is a static code analysis tool, in the same category as PMD and a few others.
It comes with a number of rules for checking style and conventions, as well as
some design patterns.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>report.stylesheet</td><td>${tool.home}/contrib/checkstyle-noframes.xsl</td><td>One of the output transformations that comes with Checkstyle. Check the distribution for others.</td>
  </tr>
  <tr>
    <td>checkstyle.config</td><td>${tool.home}/sun_checks.xml</td><td>Sun's Java style rules</td>
  </tr>
</table>
</p>

<p>
<h4><a name="cobertura">cobertura</a></h4>
Cobertura is a tool for documenting code coverage in general, although it is usually 
used for test code coverage. Generating the output involves actually running the 
unit tests, so setting up this script for an individual project involves a few
more proprties to consider than most of the other scripts.
</p>
<p>
Glean comes with a basic Ant script for running JUnit tests, either as a single
suite or as a batchtest. It also allows you to define any extra classpaths, so
for many projects this may be all that's needed. If it does not, you can either
plug in your own test script or modify the Glean script.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>unit.test.pattern</td><td>**/test/*Test.class</td><td>An Ant file pattern describing classes that represent unit tests to run. This is used to run a batchtest if no test.suite has been defined</td>
  </tr>
  <tr>
    <td>test.suite</td><td>(undefined)</td><td>The fully-qualified name of a JUnit test suite.</td>
  </tr>
  <tr>
    <td>test.bin.dir</td><td>${bin.dir}</td><td>The location of unit test class files. These will be instrumented by Emma (in a separate location)</td>
  </tr>
  <tr>
    <td>test.src.dir</td><td>${src.dir}/test-src</td><td>The location of unit test source. Will be added to the test classpath so that any properties files will be found.</td>
  </tr>
  <tr>
    <td>test.lib.dir</td><td>${lib.dir}</td><td>The location of JARs needed for the tests, primarily junit.jar</td>
  </tr>
  <tr>
    <td>test.script</td><td>${feedback.script.dir}/test.xml</td><td>A general script for running JUnit test suites or batchtests. While this could be overridden, Glean expects a certain macrodef to be available in order to run the unit tests for Emma. If you find your tests need additional setup that isn't provided here, copy the <code>test.xml</code> file, modify it, and pass that in as the test.script.</td>
  </tr>
  <tr>
    <td>coverage.dir</td><td>${gen.report.dir}</td><td>The output directory used for work files and coverage reports</td>
  </tr>
  <tr>
    <td>out.instr.dir</td><td>${gen.report.dir}/outinstr</td><td>The output directory for instrumented classes.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="cpd">cpd</a></h4>
CPD is a Copy/Paste Detector that comes with the PMD package. It looks for repeated
segments of code within the codebase and returns them. The XSL that comes with
Glean generates links to the source lines of the duplicate code based on the property
<code>src.link.prefix</code>. There are other XSL templates that come with CPD
that you can use as well. You may need to alter them if you want to link to your
HTML source.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>src.link.prefix</td><td>../java2html14</td><td>Set this based on the Java-to-HTML tool you chose to run.</td>
  </tr>
</table>
</p>

<p>
<h4><a name="doccheck">doccheck</a></h4>
This is a fairly antiquated and unsupported tool from Sun, but it does its job well:
report on missing or incorect Javadoc. Checkstyle has some rules that can be
configured to do similar checks, but this could be a useful tool if you are using
a different code analysis tool that doesn't have Javadoc checks.
</p>
<p>
<h4><a name="emma">emma</a></h4>
Emma, like Cobertura, is a general code coverage tool most often used for test code
coverage. It works in a similar way to Cobertura, with the script needing to run
the project's unit tests.
</p>
<p>
One feature that Emma provides is the ability to filter the classes that you want
to include in your report. The Emma documentation describes how to set up a file
of filters, which you can then have Glean use when it generates the report.
</p>
<p>
Glean comes with a basic Ant script for running JUnit tests, either as a single
suite or as a batchtest. It also allows you to define any extra classpaths, so
for many projects this may be all that's needed. If it does not, you can either
plug in your own test script or modify the Glean script.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>unit.test.pattern</td><td>**/test/*Test.class</td><td>An Ant file pattern describing classes that represent unit tests to run. This is used to run a batchtest if no test.suite has been defined</td>
  </tr>
  <tr>
    <td>test.suite</td><td>(undefined)</td><td>The fully-qualified name of a JUnit test suite.</td>
  </tr>
  <tr>
    <td>test.bin.dir</td><td>${bin.dir}</td><td>The location of unit test class files. These will be instrumented by Emma (in a separate location)</td>
  </tr>
  <tr>
    <td>test.src.dir</td><td>${src.dir}/test-src</td><td>The location of unit test source. Will be added to the test classpath so that any properties files will be found.</td>
  </tr>
  <tr>
    <td>test.lib.dir</td><td>${lib.dir}</td><td>The location of JARs needed for the tests, primarily junit.jar</td>
  </tr>
  <tr>
    <td>test.script</td><td>${feedback.script.dir}/test.xml</td><td>A general script for running JUnit test suites or batchtests. While this could be overridden, Glean expects a certain macrodef to be available in order to run the unit tests for Emma. If you find your tests need additional setup that isn't provided here, copy the <code>test.xml</code> file, modify it, and pass that in as the test.script.</td>
  </tr>
  <tr>
    <td>project.report.filter</td><td>${test.src.dir}/emma-filters.txt</td><td>Name of the file the script will look for if you wish to define filters for the coverage report.</td>
  </tr>
  <tr>
    <td>default.filter</td><td>filters.txt</td><td>A set of basic filters the script will use if there are no project-specific filters.</td>
  </tr>
  <tr>
    <td>coverage.dir</td><td>${gen.report.dir}</td><td>The output directory used for work files and coverage reports</td>
  </tr>
  <tr>
    <td>out.instr.dir</td><td>${gen.report.dir}/outinstr</td><td>The output directory for instrumented classes.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="findbugs">findbugs</a></h4>
Findbugs is a tool to check for common Java coding errors. It can be run as a
Swing application, an Eclipse plugin, or an Ant task. Glean uses the Ant task,
along with a basic XSLT to generate a static report. The resulting report is not
that pretty, and is something I'd like to improve on in the future.
</p>
<p>
<h4><a name="jaranalyzer">jaranalyzer</a></h4>
JarAnalyzer is a great tool for finding out or keeping track of the dependencies
you have between components (JARs). It is like JDepend taken up one level. The
report it produces is very similar to JDepend's, with similar metrics that you
can track or investigate. It is also possible to produce output in DOT format that
you can send to Graphviz and generate a graph view of the component relationships.
I'm working on a way to specify that format through Glean because I think that's
a very powerful way to express it.
</p>
<p>
It also does not appear that JarAnalyzer 1.1 supports Java 5 syntax yet. 
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>jaranalyzer.jar.filter</td><td></td><td>Ant glob pattern of JAR files to exclude from processing</td>
  </tr>
  <tr>
    <td>javanalyzer.package.filter</td><td>java.*;javax.*</td><td>Ant glob pattern of packages to exclude from processing</td>
  </tr>
</table>
</p>
<p>
<h4><a name="java2html14">java2html14</a></h4>
There are two open-source tools with the name "Java2HTML". This script drives 
the one from <a href="http://www.java2html.com">java2html.com</a>. It creates a 
very nice framed source browser, but it only supports syntax through JDK 1.4. 
If you have source with Java 5 syntax (e.g. generics, enums) you should use the 
<a href="#java2html15">java2html15</a> script, which drives the other Java2html.
</p>
<p>
If you are running Glean under JDK 1.4 and want to use this script, you will also
need to grab a slightly older version of Java2HTML, v1.3. The v1.4 release seems
to have been compiled with JDK 1.5, so that it complains about an
"Unsupported major.minor version 49.0" when you run it. The v1.3 release works
just fine for JDK 1.4 code.
</p>
<p>
<h4><a name="java2html15">java2html15</a></h4>
This script drives the other tool with the name Java2HTML, the one from
<a href="http://www.java2html.de">java2html.de</a>. This tool simply creates
HTML versions of the source, without any intent for it to be easily browsable.
If you have Java 5 source, however, it is the only one to use. It still serves
fine for creating targets for the static code analysis tools, like PMD, CPD or
Findbugs.
</p>
<p>
<h4><a name="javadoc">javadoc</a></h4>
The venerable Javadoc is something that most build scripts probably generate already.
I include it as an option in Glean so that you can remove it from your custom 
build script if you want to. Like all of these other tools, the Ant script for
Javadoc is not going to differ greatly from one project to another.
</p>
<p>
That said, there are plenty of ways that you may be customizing Javadoc already.
Glean has some properties that should hopefully let you get the same mileage out
of it's script as you get out of yours.
</p>
<p>
One set of data that Glean provides is lists of common XDoclet tags that you may
want to ignore, if for no other reason than to keep your Javadoc log more readable.
You can look in the <code>tool/javadoc</code> folder for the list of files of tags
available. You can then define <code>javadoc.taglist.files</code> to be the file(s)
to use as filters for Javadoc.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>report.title</td><td>${src.project.name}</td><td>The value of the <code>doctitle</code> Javadoc argument.</td>
  </tr>
  <tr>
    <td>report.header</td><td>${src.project.name} API</td><td>The value of the <code>header</code> Javadoc argument.</td>
  </tr>
  <tr>
    <td>report.footer</td><td>Generated on ${tool.timestamp}</td><td>The value of the <code>bottom</code> Javadoc argument.</td>
  </tr>
  <tr>
    <td>report.overview</td><td>${src.dir}/overview.html</td><td></td>
  </tr>
  <tr>
    <td>javadoc.taglist.files</td><td>empty</td><td>A list of files to use as Javadoc tag filters. A set of files containing common XDoclet tags is in <code>tool/javadoc</code>.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="javancss">javancss</a></h4>
JavaNCSS calculates a number of different source metrics. First among them is
Non-Commenting Source Statements (NCSS), what we might call Lines Of Code.
It also calculates cyclomatic complexity and Javadoc comments at the method level.
</p>
<p>
Glean includes one of the XSLTs that comes with JavaNCSS to generate the report.
You can use any other XSLT you want by overriding the <code>report.stylesheet</code> property.
</p>
<p>
<h4><a name="jdepend">jdepend</a></h4>
JDepend calculates dependency metrics at a package level, along with some design
metrics developed by Bob Martin. Its feedback can be useful for designers to keep
an eye on how an application or component design is coming together.
</p>
<p>
<h4><a name="junitreport">junitreport</a></h4>
JUnitReport is an optional task in Ant that creates a browsable report of your 
unit test results. The Glean script assumes that you have
the optional tasks installed.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>test.report.dir</td><td>${gen.report.dir}/tests</td><td>The directory that contains XML-formatted test results.</td>
  </tr>
  <tr>
    <td>test.results.pattern</td><td>TEST-*.xml</td><td>The naming pattern for the unit test results files.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="pmd">pmd</a></h4>
PMD is a static code analysis tool. It is in the same category as Checkstyle,
but has a slightly different set of rules it uses, and a different mechanism for
configuring and creating new rules.
</p>
<p>
Glean provides a basic ruleset definition file, but you will probably want to define
your own to match the expectations of your group or organization.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>pmd.rulesets</td><td>${basedir}/ruleset.xml</td><td>The ruleset definition file.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="schemaspy">schemaspy</a></h4>
SchemaSpy is a schema browser for JDBC-compliant databases. It uses the JDBC
metadata to create browsable documentation of the tables, columns, constraints
and relationships of a database. It supports a lot of databases, and has been
invaluable to me for understanding the structure of a system that's new to me.
</p>
<p>
It also can generate relationship diagrams if you have Graphviz installed.
If you don't, it will still generate the table-based documentation.
</p>
<p>
Configuring SchemaSpy has some dependencies on the type of database you want to
inspect, so see the SchemaSpy documentation for specifics of the values for the
properties.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>schemaspy.jar</td><td>${tool.home}/schemaSpy_3.1.1.jar</td><td>Location of the SchemaSpy JAR</td>
  </tr>
  <tr>
    <td>db.driver.path</td><td>${tools.base}/mysql-connector-java-5.0.4/mysql-connector-java-5.0.4-bin.jar</td><td>Location of the JDBC driver for your database.</td>
  </tr>
  <tr>
    <td>db.name</td><td></td><td>Name of the database</td>
  </tr>
  <tr>
    <td>db.type</td><td>mysql</td><td>Type of database</td>
  </tr>
  <tr>
    <td>db.schema</td><td></td><td>Schema name</td>
  </tr>
  <tr>
    <td>db.user</td><td>root</td><td>Name to use when connecting to the database</td>
  </tr>
  <tr>
    <td>db.password</td><td></td><td>Password for db.user. Can be empty</td>
  </tr>
  <tr>
    <td>db.host</td><td>localhost</td><td>Server name of the database</td>
  </tr>
  <tr>
    <td>db.port</td><td></td><td>Port to connect to on the database server</td>
  </tr>
</table>
</p>
<p>
<h4><a name="statsvn">svatsvn</a></h4>
StatSVN is a tool that slices and dices data on Subversion commit history in
various and sundry ways. You can see who line count graphs over time, commit
counts by developer, when the busiest commit time during the day or week was,
or where there is the most activity in the codebase. It is derived from StatCVS,
which does the same sort of thing with CVS activity data.
</p>
<p>
By default, the Glean script will have StatSVN look at all history on the files.
If you want to limit it, you can set a value for one of the <code>statsvn.prev.(units)</code>
properties listed below, or you can limit the number of raw revisions with
<code>statsvn.limit</code>.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>svn.log.file</td><td>${gen.report.dir}/svnlog.log</td><td>Where to generate the svn log file needed as input to StatSVN</td>
  </tr>
  <tr>
    <td>svn.include.pattern</td><td>**/*.java</td><td>Pattern of which files whose history you are interested in</td>
  </tr>
  <tr>
    <td>statsvn.limit</td><td></td><td>The number of revisions of history to analyze</td>
  </tr>
  <tr>
    <td>statsvn.prev.days</td><td></td><td>The number of days of history to analyze</td>
  </tr>
  <tr>
    <td>statsvn.prev.weeks</td><td></td><td>The number of weeks of history to analyze</td>
  </tr>
  <tr>
    <td>statsvn.prev.months</td><td></td><td>The number of months of history to analyze</td>
  </tr>
</table>
</p>
<p>
<h4><a name="umlgraph-doc">umlgraph-doc</a></h4>
UMLGraph is a tool that can generate UML class diagrams from declarative descriptions.
Since those descriptions are a subset of the Java class syntax, you can feed it
your source files and it can generate class diagrams from them.
</p>
<p>
One of the recent additions to UMLGraph is a doclet that will insert class diagrams
into Javadoc. The <code>umlgraph-doc</code> script in Glean is what generates that
output. It uses the same properties that the <code>javadoc</code> script does for
title/header/footer, plus some specific to Graphviz.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>graphviz.font.name</td><td>Arial</td><td>Name of the default font to use for the diagrams.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="umlgraph-views">umlgraph-views</a></h4>
UMLGraph can also generate class diagrams based on "view" descriptions.
These are descriptions based on UMLGraph-specific Javadoc tags that allow you
to specify the content, style, and color of diagram elements.
To use this Glean script, you will need to have these description files somewhere
in your source tree. The UMLGraph documentation describes the content of the files.
</p>
<p>
The output from UMLGraph will be PNG files, located in the directory defined by
<code>gen.report.dir</code>.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>report.view.src</td><td>${project.root}/report-src/views</td><td>The location of view description files.</td>
  </tr>
</table>
</p>
</section>

</body>
</document>
