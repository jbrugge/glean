<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <author email="john@jbrugge.com">John Brugge</author>
    <title>Glean : Tools</title>
  </properties>

<body>
<section name="Basic Tools">
<p>
The basic setup of Glean is meant to give you feedback that is easy to generate,
immediately useful to almost any project, and with the least reliance on other tools.
Start with this set to get a feel for Glean and for how you can incorporate the
feedback into your project team. If you find you want to add other feedback sources,
there are scripts from Glean for any of the tools listed below
(simply list it in the <code>tool.pattern</code> property in your project configuration file),
or you can <a href="./adding.html">add support for another tool.</a>
</p>
<p>
These tools come with all of their dependent JARs packaged together. You can download
them using the links in the table, and then tell Glean about their install location
in the <code>toolhome.properties.local</code> file. 
</p>
<table class="bodyTable">
<th>Name</th><th>Description</th>
<tr class="a"><td><a href="http://www.java2html.com">java2html</a></td><td>Source code cross-reference in HTML</td></tr>
<tr class="a"><td><a href="http://java.sun.com/j2se/javadoc/">javadoc</a></td><td>Class API documentation</td></tr>
<tr class="a"><td><a href="http://www.kclee.de/clemens/java/javancss/">javancss</a></td><td>Source code metrics (LOC, McCabe Complexity)</td></tr>
<tr class="a"><td><a href="http://pmd.sourceforge.net">pmd</a></td><td>Static code analysis of style and design</td></tr>
</table>
</section>

<section name="All Tools">
<p>
Glean comes with scripts for a number of tools. Add any of these to your builds by 
downloading the tool and then including the name for the tool (from the table below) in 
the <code>tool.pattern</code> property for your project. Glean's script will then
run the tool using the same properties you specified for all of the other tools
(e.g. source location).
Any other tools or files you need for these is listed for each tool. For instance,
in order to run UmlGraph, you need to have <a href="http://www.graphviz.org">GraphViz</a> 
installed.
</p>
<p>
More is not necessarily
better, so start small and add feedback sources when you find that you can get
some benefit from their data.
</p>
<table class="bodyTable">
<th>Name</th><th>Description</th><th>JDK Level</th><th>Dependencies</th><th>Home</th>


            <tr class="a">
            <td><a href="#beandoc">beandoc</a></td>
            <td>Spring bean documentation</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://opensource.atlassian.com/confluence/spring/display/BDOC/Home">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#checkstyle">checkstyle</a></td>
            <td>Checks code against team style and design guidelines.</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://checkstyle.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#cobertura">cobertura</a></td>
            <td>Unit test coverage report</td>
            <td>1.4</td>
            <td>Optional Ant tasks (JUnit)</td>
            <td><a href="http://cobertura.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#cpd">cpd</a></td>
            <td>Report of copy/paste segments found in source</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://pmd.sourceforge.net/cpd.html">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#dashboard">dashboard</a></td>
            <td>Summary view of feedback metrics</td>
            <td>1.4</td>
            <td>Groovy</td>
            <td><a href="http://jbrugge.com/glean/dashboard.jar">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#dbdoclet">dbdoclet</a></td>
            <td>Generates DocBook documentation from source code</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://www.michael-a-fuchs.de/projects/dbdoclet/en/index.html">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#doccheck">doccheck</a></td>
            <td>Checks completion of JavaDoc comments</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://java.sun.com/j2se/javadoc/doccheck/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#emma">emma</a></td>
            <td>Unit test coverage report</td>
            <td>1.4</td>
            <td>Optional Ant tasks (JUnit)</td>
            <td><a href="http://emma.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#findbugs">findbugs</a></td>
            <td>Static code analysis for common programming errors</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://findbugs.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#jaranalyzer">jaranalyzer</a></td>
            <td>Component-level dependency analysis</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://www.kirkk.com/main/Main/JarAnalyzer">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#java2html14">java2html14</a></td>
            <td>Java source cross-reference in HTML</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://www.java2html.com">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#java2html15">java2html15</a></td>
            <td>Java source conversion to HTML</td>
            <td>1.5</td>
            <td>None</td>
            <td><a href="http://www.java2html.de">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#javadoc">javadoc</a></td>
            <td>Java API documentation</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://java.sun.com/j2se/javadoc/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#javancss">javancss</a></td>
            <td>Source code size and complexity metrics</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://www.kclee.de/clemens/java/javancss/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#jdepend">jdepend</a></td>
            <td>Report on package-level dependency metrics</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://clarkware.com/software/JDepend.html">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#junitreport">junitreport</a></td>
            <td>Creates a browsable report of testcase results</td>
            <td>1.4</td>
            <td>Optional Ant tasks (JUnit)</td>
            <td><a href="http://ant.apache.org/manual/OptionalTasks/junitreport.html">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#pmd">pmd</a></td>
            <td>Static analysis of source files using design and style rules</td>
            <td>1.4</td>
            <td>None</td>
            <td><a href="http://pmd.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#qalab">qalab</a></td>
            <td>Consolidation and tracking of feedback data</td>
            <td>1.4</td>
            <td><a href="http://jfree.org/jfreechart">JFreeChart</a></td>
            <td><a href="http://qalab.sourceforge.net">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#schemaspy">schemaspy</a></td>
            <td>Database schema and entity browser</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://schemaspy.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#statcvs">statcvs</a></td>
            <td>Statistical data from CVS repository activity</td>
            <td>1.4</td>
            <td>CVS command-line client</td>
            <td><a href="http://statcvs.sourceforge.net/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#statsvn">statsvn</a></td>
            <td>Statistical data from Subversion repository activity</td>
            <td>1.4</td>
            <td>Subversion command-line client</td>
            <td><a href="http://statsvn.org/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#umlgraph-doc">umlgraph-doc</a></td>
            <td>Javadoc with embedded UML class diagrams</td>
            <td>1.5</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://www.spinellis.gr/sw/umlgraph/">Download</a></td>
            </tr>
        
            <tr class="a">
            <td><a href="#umlgraph-views">umlgraph-views</a></td>
            <td>UML class diagrams from source code</td>
            <td>1.4</td>
            <td><a href="http://graphviz.org">Graphviz</a></td>
            <td><a href="http://www.spinellis.gr/sw/umlgraph/">Download</a></td>
            </tr>
    </table>
</section>

<section name="Tool Descriptions">
<p>
Each of the tools that Glean drives typically makes use of some of the 
<a href="./using.html#properties">basic common properties</a> of a project, 
such as the source, binary and library directories.
Many of them also have other properties that define what they do or how they produce
their output. All of them have reasonable default values that should work for most
people as they are, but if you want to customize any part of a tool, see the
description below or just dive into the source Ant script.
</p>
<p>
<h4><a name="beandoc">beandoc</a></h4>
Beandoc is a tool for documenting <a href="http://www.springframework.org">Spring</a>
bean configuration files. Most importantly, it describes and diagrams the relationships
between beans, with the bean definitions hyperlinked together.
</p>
<p>
This tool only appears to come in source form as of this writing (v0.7.1). Once
you have it downloaded, see the README. Building should be just running "ant dist"
from the command line.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>spring.config.pattern</td><td>**/*Context.xml</td><td>Naming style for your Spring files</td>
  </tr>
  <tr>
    <td>spring.config.dir</td><td>${src.dir}</td><td>Root of search path for config files</td>
  </tr>
</table>
</p>
<p>
<h4><a name="checkstyle">checkstyle</a></h4>
Checkstyle is a static code analysis tool, in the same category as PMD and a few others.
It comes with a number of rules for checking style and conventions, as well as
some design patterns.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>report.stylesheet</td><td>${tool.home}/contrib/checkstyle-noframes.xsl</td><td>One of the output transformations that comes with Checkstyle. Check the distribution for others.</td>
  </tr>
  <tr>
    <td>checkstyle.config</td><td>${tool.home}/sun_checks.xml</td><td>Sun's Java style rules</td>
  </tr>
</table>
</p>

<p>
<h4><a name="cobertura">cobertura</a></h4>
Cobertura is a tool for documenting code coverage in general, although it is usually 
used for test code coverage. Generating the output involves actually running the 
unit tests, so setting up this script for an individual project involves a few
more proprties to consider than most of the other scripts.
</p>
<p>
Glean comes with a basic Ant script for running JUnit tests, either as a single
suite or as a batchtest. It also allows you to define any extra classpaths, so
for many projects this may be all that's needed. If it does not, you can either
plug in your own test script or modify the Glean script.
</p>
<p>
If you want to restrict the classes that show up in the coverage report, for example 
excluding simple beans that have little value in testing, you can specify filters. 
You can supply a set of inclusion filters as well as a set of exclusion filters. 
They are written as simple 
<a href="http://ant.apache.org/manual/dirtasks.html#patterns">Ant-style patterns</a>
in a file that you specify, one pattern per line.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>unit.test.pattern</td><td>**/*Test.class</td><td>An Ant file pattern describing classes that represent unit tests to run. This is used to run a batchtest if no test.suite has been defined</td>
  </tr>
  <tr>
    <td>test.suite</td><td>(undefined)</td><td>The fully-qualified name of a JUnit test suite.</td>
  </tr>
  <tr>
    <td>test.bin.dir</td><td>${bin.dir}</td><td>The location of unit test class files. These will be instrumented by Emma (in a separate location)</td>
  </tr>
  <tr>
    <td>test.src.dir</td><td>${src.dir}/test-src</td><td>The location of unit test source. Will be added to the test classpath so that any properties files will be found.</td>
  </tr>
  <tr>
    <td>test.lib.dir</td><td>${lib.dir}</td><td>The location of JARs needed for the tests, primarily junit.jar</td>
  </tr>
  <tr>
    <td>test.script</td><td>${feedback.script.dir}/test.xml</td><td>A general script for running JUnit test suites or batchtests. While this could be overridden, Glean expects a certain macrodef to be available in order to run the unit tests for Emma. If you find your tests need additional setup that isn't provided here, copy the <code>test.xml</code> file, modify it, and pass that in as the test.script.</td>
  </tr>
  <tr>
    <td>cobertura.exclude.filter</td><td>${test.src.dir}/cobertura.filter.excludes</td><td>Name of the file that holds exclusion filters for the coverage report. Filters are Ant-style path syntax, one filter per line.</td>
  </tr>
  <tr>
    <td>cobertura.include.filter</td><td>${test.src.dir}/cobertura.filter.includes</td><td>Name of the file that holds inclusion filters for the coverage report. Filters are Ant-style path syntax, one filter per line.</td>
  </tr>
  <tr>
    <td>coverage.dir</td><td>${gen.report.dir}</td><td>The output directory used for work files and coverage reports</td>
  </tr>
  <tr>
    <td>out.instr.dir</td><td>${gen.report.dir}/outinstr</td><td>The output directory for instrumented classes.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="cpd">cpd</a></h4>
CPD is a Copy/Paste Detector that comes with the PMD package. It looks for repeated
segments of code within the codebase. The XSL that comes with
Glean generates links to the source lines of the duplicate code based on the property
<code>src.link.prefix</code>. There are other XSL templates that come with CPD
that you can use as well. You may need to alter them if you want to link to your
HTML source.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>src.link.prefix</td><td>../java2html14</td><td>Set this based on the Java-to-HTML tool you chose to run.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="dashboard">dashboard</a></h4>
The Glean dashboard is a custom Groovy script that gathers together a summary of
the results of the other analysis tools for a point-in-time view of your feedback.
The sample screenshot gives you an idea of what you will see.
</p>
<p>
Unlike the other tools, enabling the dashboard is done via a separate property,
<code>create.dashboard</code>, which should have an Ant "true" value (yes/true/on).
It is done this way rather than on the <code>tool.pattern</code> property to make
sure that it run after all other tools have run and generated their output.
</p>
<p>
The Groovy code that runs this needs to be downloaded separately. It is packaged
as a JAR, but the source is there too if you want to see how it works or improve
on it. (I am new to Groovy, so I make no claims to it being a model of Groovy code.)
The <code>toolhome.properties.local</code> file should also be updated to point
to the place where the dashboard JAR and Groovy are each installed.
</p>
<p>
The dashboard was inspired by 
<a href="http://thediscoblog.com/2007/01/27/groovys-the-elixir-for-report-overload-syndrome/">
Andy Glover's description of a summary page</a> for
feedback metrics, and his pointing out how easy it is to gather this stuff together
with Groovy.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td></td><td></td><td></td>
  </tr>
</table>
</p>
<p>
<h4><a name="dbdoclet">dbdoclet</a></h4>
DocBook Doclet is a Javadoc doclet that generates DocBook code rather than HTML.
It is great if you want to generate a nicely formatted API document for your system
or component. The basic Glean script will generate a PDF document of your API
with a basic layout. 
</p>
<p>
Their process takes place in three steps, each of which has settings you can alter.
<ul>
<li>The Javadoc step uses the same basic properties as the <a href="#javadoc">Javadoc</a>
script so you can set any of those to affect the content of the documentation. 
The output of this step is a DocBook formatted file</li>
<li>The transformation from DocBook to FO format files involves an XSL transformation,
so you can choose from the stylesheets that come with DocBook Doclet or supply your own.</li>
<li>The final step of creating a PDF from an FO file is handled by Apache FOP, and
there are currently no setting choices for that in the Glean script other than
the eventual file name. If there are other options that would be worth including,
please let me know.</li>
</ul>
</p>
<p>
Note: If you are running Java 5 the XSL transformation task in Ant will, by default,
use the XSLTC engine, which will want to compile the XSL stylesheet. There is a
known issue with the DocBook stylesheets that can cause compiler errors, so the
Glean script has the XSLT task use the Xalan processor instead. If Ant complains
that it can't find the Xalan classes, you may need to put a copy of them in your
<code>${user.home}/.ant/lib</code> folder.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>dbdoclet.report.file</td><td>${gen.report.dir}/Reference.xml</td><td>DocBook output file from the doclet</td>
  </tr>
  <tr>
    <td>dbdoclet.fo.file</td><td>${gen.report.dir}/dbdoclet.fo</td><td>Intermediate FO file</td>
  </tr>
  <tr>
    <td>dbdoclet.pdf.file</td><td>${gen.report.dir}/${src.project.name}-API.pdf</td><td>Final PDF document</td>
  </tr>
  <tr>
    <td>dbdoclet.fo.transform</td><td>${tool.home}/xslt/fo/Modern.xsl</td><td>The FO transform. There are several others in the DocBook Doclet distribution you can choose from.</td>
  </tr>
  <tr>
    <td>dbdoclet.maxmemory</td><td>512m</td><td>JVM size for the Javadoc task. The doclet can require a significant amount of memory to render the DocBook output.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="doccheck">doccheck</a></h4>
This is a fairly antiquated and unsupported tool from Sun, but it does its job well:
report on missing or incorect Javadoc. Checkstyle has some rules that can be
configured to do similar checks, but this could be a useful tool if you are using
a different code analysis tool that doesn't have Javadoc checks.
</p>
<p>
<h4><a name="emma">emma</a></h4>
Emma, like Cobertura, is a general code coverage tool most often used for test code
coverage. It works in a similar way to Cobertura, with the script needing to run
the project's unit tests.
</p>
<p>
Glean comes with a basic Ant script for running JUnit tests, either as a single
suite or as a batchtest. It also allows you to define any extra classpaths, so
for many projects this may be all that's needed. If it does not, you can either
plug in your own test script or modify the Glean script.
</p>
<p>
If you want to restrict the classes that show up in the coverage report, for example
excluding simple beans that have little value in testing, you can supply a filter
file. 
The <a href="http://emma.sourceforge.net/reference/ch02s06s02.html">Emma documentation</a> 
descibes the format of its coverage filters.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>unit.test.pattern</td><td>**/test/*Test.class</td><td>An Ant file pattern describing classes that represent unit tests to run. This is used to run a batchtest if no test.suite has been defined</td>
  </tr>
  <tr>
    <td>test.suite</td><td>(undefined)</td><td>The fully-qualified name of a JUnit test suite.</td>
  </tr>
  <tr>
    <td>test.bin.dir</td><td>${bin.dir}</td><td>The location of unit test class files. These will be instrumented by Emma (in a separate location)</td>
  </tr>
  <tr>
    <td>test.src.dir</td><td>${src.dir}/test-src</td><td>The location of unit test source. Will be added to the test classpath so that any properties files will be found.</td>
  </tr>
  <tr>
    <td>test.lib.dir</td><td>${lib.dir}</td><td>The location of JARs needed for the tests, primarily junit.jar</td>
  </tr>
  <tr>
    <td>test.script</td><td>${feedback.script.dir}/test.xml</td><td>A general script for running JUnit test suites or batchtests. While this could be overridden, Glean expects a certain macrodef to be available in order to run the unit tests for Emma. If you find your tests need additional setup that isn't provided here, copy the <code>test.xml</code> file, modify it, and pass that in as the test.script.</td>
  </tr>
  <tr>
    <td>project.report.filter</td><td>${test.src.dir}/emma-filters.txt</td><td>Name of the file the script will look for if you wish to define filters for the coverage report.</td>
  </tr>
  <tr>
    <td>default.filter</td><td>filters.txt</td><td>A set of basic filters the script will use if there are no project-specific filters.</td>
  </tr>
  <tr>
    <td>coverage.dir</td><td>${gen.report.dir}</td><td>The output directory used for work files and coverage reports</td>
  </tr>
  <tr>
    <td>out.instr.dir</td><td>${gen.report.dir}/outinstr</td><td>The output directory for instrumented classes.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="findbugs">findbugs</a></h4>
Findbugs is a tool to check for common Java coding errors. Glean runs its Ant task,
along with a basic XSLT to generate a static HTML report. 
It also produces XML output can also be used by the <a href="#qalab">QALab</a> script.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>report.stylesheet</td><td>${tool.home}/src/xsl/default.xsl</td><td>One of the output transformations that comes with Findbugs. Check the distribution for others.</td>
  </tr>
  <tr>
    <td>findbugs.report.level</td><td>medium</td><td>The priority level threshold for bugs that are reported</td>
  </tr>
  <tr>
    <td>findbugs.timeout</td><td>600000</td><td>Amount of time in milliseconds before the Findbugs task will be assumed to be hung and will be ended.</td>
  </tr>
  <tr>
    <td>findbugs.stylesheet</td><td>default.xsl</td><td>This stylesheet is only used if the <code>findbugs.report.format</code> is set to <code>html</code>. Otherwise, the report.stylesheet will be used.</td>
  </tr>
  <tr>
    <td>findbugs.report.format</td><td>xml:withMessages</td><td>The 'withMessages' format for the XML provides more readable results, and having it in XML format allows the data to be read by QALab as well.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="jaranalyzer">jaranalyzer</a></h4>
JarAnalyzer is a great tool for discovering or keeping track of the dependencies
you have between components (JARs). It is like JDepend taken up one level. The
report it produces is very similar to JDepend's, with similar metrics that you
can track or investigate. It is also possible to produce output in DOT format that
you can send to Graphviz and generate a graph view of the component relationships.
I'm working on a way to specify that format through Glean because I think that's
a very powerful way to express it.
</p>
<p>
JarAnalyzer 1.1 uses BCEL which, unfortunately, does not support Java 5 syntax,
so if your project is using Java 5 then this tool won't work.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>jaranalyzer.jar.filter</td><td></td><td>Ant glob pattern of JAR files to exclude from processing</td>
  </tr>
  <tr>
    <td>javanalyzer.package.filter</td><td>java.*;javax.*</td><td>Ant glob pattern of packages to exclude from processing</td>
  </tr>
</table>
</p>
<p>
<h4><a name="java2html14">java2html14</a></h4>
There are two open-source tools with the name "Java2HTML". This script drives 
the one from <a href="http://www.java2html.com">java2html.com</a>. It creates a 
very nice framed source browser, but it only supports syntax through JDK 1.4. 
If you have source with Java 5 syntax (e.g. generics, enums) you should use the 
<a href="#java2html15">java2html15</a> script, which drives the other Java2html.
</p>
<p>
If you are running Glean under JDK 1.4 and want to use this script, you will also
need to grab a slightly older version of Java2HTML, v1.3. The v1.4 release seems
to have been compiled with JDK 1.5, so that it complains about an
"Unsupported major.minor version 49.0" when you run it. The v1.3 release works
just fine for JDK 1.4 code.
</p>
<p>
<h4><a name="java2html15">java2html15</a></h4>
This script drives the other tool with the name Java2HTML, the one from
<a href="http://www.java2html.de">java2html.de</a>. This tool simply creates
HTML versions of the source, without any intent for it to be easily browsable.
If you have Java 5 source, however, it is the only one to use. It still serves
fine for creating targets for the static code analysis tools, like PMD, CPD or
Findbugs.
</p>
<p>
<h4><a name="javadoc">javadoc</a></h4>
The venerable Javadoc is something that most build scripts probably generate already.
I include it as an option in Glean so that you can remove it from your custom 
build script if you want to. Like all of these other tools, the Ant script for
Javadoc is not going to differ greatly from one project to another.
</p>
<p>
That said, there are plenty of ways that you may be customizing Javadoc already.
Glean has some properties that should hopefully let you get the same mileage out
of it's script as you get out of yours.
</p>
<p>
One set of data that Glean provides is lists of common XDoclet tags that you may
want to ignore, if for no other reason than to keep your Javadoc log more readable.
You can look in the <code>tool/javadoc</code> folder for the list of files of tags
available. You can then define <code>javadoc.taglist.files</code> to be the file(s)
to use as filters for Javadoc.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>report.title</td><td>${src.project.name}</td><td>The value of the <code>doctitle</code> Javadoc argument.</td>
  </tr>
  <tr>
    <td>report.header</td><td>${src.project.name} API</td><td>The value of the <code>header</code> Javadoc argument.</td>
  </tr>
  <tr>
    <td>report.footer</td><td>Generated on ${tool.timestamp}</td><td>The value of the <code>bottom</code> Javadoc argument.</td>
  </tr>
  <tr>
    <td>report.overview</td><td>${src.dir}/overview.html</td><td></td>
  </tr>
  <tr>
    <td>javadoc.taglist.files</td><td>empty</td><td>A list of files to use as Javadoc tag filters. A set of files containing common XDoclet tags is in <code>tool/javadoc</code>.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="javancss">javancss</a></h4>
JavaNCSS calculates a number of different source metrics. First among them is
Non-Commenting Source Statements (NCSS), what we might call Lines Of Code.
It also calculates cyclomatic complexity and Javadoc comments at the method level.
</p>
<p>
Glean includes one of the XSLTs that comes with JavaNCSS to generate the report.
You can use any other XSLT you want by overriding the <code>report.stylesheet</code> property.
</p>
<p>
<h4><a name="jdepend">jdepend</a></h4>
JDepend calculates dependency metrics at a package level, along with some 
<a href="http://www.objectmentor.com/resources/articles/oodmetrc.pdf">design
metrics</a> developed by Bob Martin. Its feedback can be useful for designers to keep
an eye on how an application or component design is coming together.
</p>
<p>
<h4><a name="junitreport">junitreport</a></h4>
JUnitReport is an optional task in Ant that creates a browsable report of your 
unit test results. The Glean script assumes that you have
the Ant optional tasks installed.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>test.report.dir</td><td>${gen.report.dir}/tests</td><td>The directory that contains XML-formatted test results.</td>
  </tr>
  <tr>
    <td>test.results.pattern</td><td>TEST-*.xml</td><td>The naming pattern for the unit test results files.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="pmd">pmd</a></h4>
PMD is a static code analysis tool. It is in the same category as Checkstyle,
but has a slightly different set of rules it uses, and a different mechanism for
configuring and creating new rules.
</p>
<p>
Glean provides a basic ruleset definition file, but you will probably want to define
your own to match the expectations of your group or organization.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>pmd.rulesets</td><td>${basedir}/ruleset.xml</td><td>The ruleset definition file.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="qalab">qalab</a></h4>
QALab is a tool that consolidates data from a number of analysis tools and then
creates graphs that allow you to see the change in metrics over time. It is a great
tool for helping to keep an eye on key quality metrics during an ongoing development
effort. The tools it tracks are (almost) all ones that Glean also supports, so
Glean can discover which ones you are running and automatically include them in
the QALab report. That means that to start using QALab, all you need to do is add
its name to the <code>tool.pattern</code> setting for your project and let it go.
</p>
<p>
QALab parses the XML output of the different tools, so in order to make sure that
the data is ready, you will need to place it after the other tools in the
<code>tool.pattern</code> list. QALab currently supports these tools:
<ul>
<li>Checkstyle</li>
<li>Cobertura (line and branch metrics tracked separately)</li>
<li>Findbugs</li>
<li>PMD</li>
<li>CPD</li>
<li>Simian</li>
</ul>
The Glean script supports all of these except for Simian, since Simian is not an
open-source tool and I have not had a chance to work with it. CPD is in the same
category of tool, so if you are looking for a copy/paste detection tool, start with
CPD.
</p>
<p>
There is also currently a bit of a conundrum with Findbugs in the QALab 1.0 release. 
The Findbugs format that QALab parses is the "xdoc" format, which is what Findbugs 
can emit for Maven reporting. And unfortunately, Findbugs does not allow you to 
specify multiple output formats. The good news is that QALab 1.1 should have 
support for the XML format from Findbugs. Until then, you will have to choose 
between getting a Findbugs report and getting QALab analysis of Findbugs data.
</p>
<p>
Another important note is that the QALab data files contain historical data, with
each run of QALab adding more data on your project. Therefore they should live somewhere where
they can be backed up or committed to source control, and not in the same place
as the normal Glean output.
</p>
<p>
Lastly, the XSLTs for QALab are only included in the source distribution, so you
can either download the binary and the source, or just the source and build the
binaries.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>qalab.data.file</td><td>${user.home}/${src.project.name}-qalab.xml</td><td>The main datafile.</td>
  </tr>
  <tr>
    <td>qalab.movers.file</td><td>${user.home}/${src.project.name}-qalab-movers.xml</td><td>The datafile for "movers", or classes whose metrics are changing most in a given period.</td>
  </tr>
  <tr>
    <td>qalab.chart.width</td><td>500</td><td>The default width of the data charts.</td>
  </tr>
  <tr>
    <td>qalab.chart.height</td><td>333</td><td>The default height of the data charts.</td>
  </tr>
  <tr>
    <td>qalab.summary.only</td><td>false</td><td>Whether or not to have individual class charts or only a project summary chart.</td>
  </tr>
  <tr>
    <td>qalab.moving.average</td><td>10</td><td>The number of days to use as a moving average to smooth out the graphs.</td>
  </tr>
  <tr>
    <td>qalab.chart.stylesheet</td><td>${qalab.home}/qalab/src/xslt/qalab-chart-html.xsl</td><td>The XSL for generating charts.</td>
  </tr>
  <tr>
    <td>qalab.movers.stylesheet</td><td>${qalab.home}/qalab/src/xslt/qalab-movers-html.xsl</td><td>The XSL for generating the movers reports.</td>
  </tr>
  <tr>
    <td>jfreechart.home</td><td>${tools.base}/jfreechart-1.0.5</td><td>The location of your JFreechart installation.</td>
  </tr>
  <tr>
    <td>checkstyle.data.file</td><td>${gen.report.root}/checkstyle/${src.project.name}-checkstyle-feedback.xml</td><td>The location of the Checkstyle XML output.</td>
  </tr>
  <tr>
    <td>cobertura.data.file</td><td>${gen.report.root}/cobertura/coverage.xml</td><td>The location of the Cobertura XML output.</td>
  </tr>
  <tr>
    <td>cpd.data.file</td><td>${gen.report.root}/cpd/${src.project.name}-cpd-feedback.xml</td><td>The location of the CPD XML output.</td>
  </tr>
  <tr>
    <td>pmd.data.file</td><td>${gen.report.root}/pmd/${src.project.name}-pmd-feedback.xml</td><td>The location of the PMD XML output.</td>
  </tr>
  <tr>
    <td>findbugs.data.file</td><td>${gen.report.root}/findbugs/${src.project.name}-findbugs-feedback.xdoc</td><td>The location of the Findbugs XML output.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="schemaspy">schemaspy</a></h4>
SchemaSpy is a schema browser for JDBC-compliant databases. It uses the JDBC
metadata to create browsable documentation of the tables, columns, constraints
and relationships of a database. It supports a lot of databases, and has been
invaluable to me for understanding the structure of a system that's new to me.
</p>
<p>
It also can generate relationship diagrams if you have Graphviz installed.
If you don't, it will still generate the table-based documentation.
</p>
<p>
Configuring SchemaSpy has some dependencies on the type of database you want to
inspect, so see the <a href="http://schemaspy.sourceforge.net/">SchemaSpy documentation</a> 
for specifics of the values for the properties.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>schemaspy.jar</td><td>${tool.home}/schemaSpy_3.1.1.jar</td><td>Location of the SchemaSpy JAR</td>
  </tr>
  <tr>
    <td>db.driver.path</td><td>${tools.base}/mysql-connector-java-5.0.4/mysql-connector-java-5.0.4-bin.jar</td><td>Location of the JDBC driver for your database.</td>
  </tr>
  <tr>
    <td>db.name</td><td></td><td>Name of the database</td>
  </tr>
  <tr>
    <td>db.type</td><td>mysql</td><td>Type of database</td>
  </tr>
  <tr>
    <td>db.schema</td><td></td><td>Schema name</td>
  </tr>
  <tr>
    <td>db.user</td><td>root</td><td>Name to use when connecting to the database</td>
  </tr>
  <tr>
    <td>db.password</td><td></td><td>Password for db.user. Can be empty</td>
  </tr>
  <tr>
    <td>db.host</td><td>localhost</td><td>Server name of the database</td>
  </tr>
  <tr>
    <td>db.port</td><td></td><td>Port to connect to on the database server</td>
  </tr>
</table>
</p>
<p>
<h4><a name="statcvs">svatcvs</a></h4>
StatCVS is a tool that analyzes the commit history from a CVS repository.
You can see line count graphs over time, commit
counts by developer, when the busiest commit time during the day or week was,
or where there is the most activity in the codebase. It is the basis for StatSVN,
which does the same thing (with a few more features) for a Subversion repository.
</p>
<p>
By default, the Glean script will have StatCVS look at all history on the files.
If you want to limit it, you can set a value for one of the <code>statcvs.prev.(units)</code>
properties listed below.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>cvs.log.file</td><td>${gen.report.dir}/cvslog.log</td><td>Where to generate the cvs log file needed as input to StatCVS</td>
  </tr>
  <tr>
    <td>cvs.include.pattern</td><td>**/*.java</td><td>Pattern of which files whose history you are interested in</td>
  </tr>
  <tr>
    <td>statcvs.prev.days</td><td></td><td>The number of days of history to analyze</td>
  </tr>
  <tr>
    <td>statcvs.prev.weeks</td><td></td><td>The number of weeks of history to analyze</td>
  </tr>
  <tr>
    <td>statcvs.prev.months</td><td></td><td>The number of months of history to analyze</td>
  </tr>
</table>
</p>
<p>
<h4><a name="statsvn">svatsvn</a></h4>
StatSVN is a tool that slices and dices data on Subversion commit history in
various and sundry ways. You can see line count graphs over time, commit
counts by developer, when the busiest commit time during the day or week was,
or where there is the most activity in the codebase. It is derived from StatCVS,
which does the same sort of thing with CVS activity data.
</p>
<p>
By default, the Glean script will have StatSVN look at all history on the files.
If you want to limit it, you can set a value for one of the <code>statsvn.prev.(units)</code>
properties listed below.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>svn.log.file</td><td>${gen.report.dir}/svnlog.log</td><td>Where to generate the svn log file needed as input to StatSVN</td>
  </tr>
  <tr>
    <td>svn.include.pattern</td><td>**/*.java</td><td>Pattern of which files whose history you are interested in</td>
  </tr>
  <tr>
    <td>statsvn.prev.days</td><td></td><td>The number of days of history to analyze</td>
  </tr>
  <tr>
    <td>statsvn.prev.weeks</td><td></td><td>The number of weeks of history to analyze</td>
  </tr>
  <tr>
    <td>statsvn.prev.months</td><td></td><td>The number of months of history to analyze</td>
  </tr>
</table>
</p>
<p>
<h4><a name="umlgraph-doc">umlgraph-doc</a></h4>
UMLGraph is a tool that can generate UML class diagrams from declarative descriptions.
Since those descriptions are a subset of the Java class syntax, you can feed it
your source files and it will generate class diagrams from them.
</p>
<p>
One of the recent additions to UMLGraph is a doclet that will insert class diagrams
into Javadoc. The <code>umlgraph-doc</code> script in Glean runs this doclet. 
It uses the same properties that the <code>javadoc</code> script does for
title/header/footer.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>graphviz.font.name</td><td>Arial</td><td>Name of the default font to use for the diagrams.</td>
  </tr>
</table>
</p>
<p>
<h4><a name="umlgraph-views">umlgraph-views</a></h4>
UMLGraph can also generate class diagrams based on "view" descriptions.
These are descriptions based on UMLGraph-specific Javadoc tags that allow you
to specify the content, style, and color of diagram elements.
To use this Glean script, you will need to have these description files somewhere
in your source tree. The UMLGraph documentation describes the content of the files.
</p>
<p>
The output from UMLGraph will be PNG files, located in the directory defined by
<code>gen.report.dir</code>.
</p>
<p>
<table class="bodyTable">
<th>Property</th><th>Default value</th><th>Description</th>
  <tr>
    <td>report.view.src</td><td>${project.root}/report-src/views</td><td>The location of view description files.</td>
  </tr>
</table>
</p>
</section>

</body>
</document>
