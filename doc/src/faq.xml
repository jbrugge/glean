<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <author email="john@jbrugge.com">John Brugge</author>
    <title>Glean : Frequently Asked Questions</title>
  </properties>

<body>
<section name="Frequently Asked Questions">
<div class="faq">
<div class="question">
<p>
These are just Ant scripts, and I already have tasks for javadoc and PMD. What's
the point of using Glean?
</p>
</div>

<div class="answer">
<p>
The goal of Glean is to help you along two dimensions: 
<ul>
    <li>to let you add or remove feedback tools easily for a given project</li>
    <li>to let you run these tools against any project you have</li>
</ul>
</p>
<p>
The first point means that you can easily try out different tools, change you mind,
and experiment with what particular feedback is most valuable for your project.
For many of the tools, it's as simple as adding the tool's name to the 
<code>tool.pattern</code> property.
The Glean tool scripts are the boilerplate Ant script for each tool 
that most anyone would need to write if they were going to use that tool. 
And if the standard boilerplate values aren't just what you want, there are
property values that you can override with standard Ant property overrides.
</p>
<p>
The second point means that you can have a consistent feedback process across
any number of projects.
You define your project layout with some properties, and then these are used
by each of the tools. And since Glean can sit outside of your project build,
gathering feedback from a set of projects is simply a matter of pointing Glean
at each of their properties settings.
</p>
<p>
If you already have that flexibility in your build scripts, then you are ahead
of the game, and may not need Glean. Then again, if you want to simplify your
build scripts, you can let Glean take over the feedback responsibility.
</p>
</div>
</div>

<div class="faq">
<div class="question">
<p>
Doesn't Maven do this kind of thing for me?
</p>
</div>

<div class="answer">
<p>
If you are using Maven, then you already have a flexible, extensible system for
plugins. Glean is aimed at giving something of that flavor to folks who use Ant.
</p>
</div>
</div>

<div class="faq">
<div class="question">
<p>
We already use a lot of these tools in Eclipse, and the feedback is much more
immediate. Doesn't this make the feedback loop longer rather than shorter?</p>
</div>

<div class="answer">
<p>
Yes it does make the feedback loop potentially longer. The more immediate the
feedback you can get the better. However, it's going to be hard to get consistent 
feedback from your IDE for everyone on the team, nor do some people want to put
more of a burden on their IDE than it already has. By all means, use IDE plugins
to get feedback, but there is a lot of value to the project as a whole
to have a more independent set of feedback that everyone can look at.
</p>
</div>
</div>

<div class="faq">
<div class="question">
<p>
Do you have a script for tool X? We use it all the time, and it's great.
</p>
</div>

<div class="answer">
<p>
The tools that Glean can drive are listed on the <a href="./tools.html">tools page</a>.
You can also look in the <code>tool</code> directory of the release. Each tool
has its own directory in there.
</p>
<p>
If your favorite tool isn't part of Glean, either 
<a href="mailto:john.brugge+glean@gmail.com">drop me a note</a> or try creating
a script on your own. There is a template <code>build.xml</code> in the <code>templates</code>
directory, and some <a href="./adding.html">basic instructions</a> for how to
write it. If it works for you, I would love to hear about it and add it in to
Glean for others to use.
</p>
</div>
</div>

<div class="faq">
<div class="question">
<p>
We have multiple source projects that make up the codebase for our overall project.
How would we use Glean to get some aggregate feedback from all of the code?
</p>
</div>

<div class="answer">
<p>
With the current release of Glean you cannot specify multiple source folders,
but that is a feature that I really want to add.
For now, you have a couple of choices:
<ul>
    <li>create multiple project property files for Glean, and run each one separately</li>
    <li>modify your build script to create a pseudo-project area, with all of the
    source files copied in to one tree. You can then point Glean at that area.</li>
</ul>
</p>
<p>
The ideas behind Glean developed from working on a project like that, where there
were many component parts to the application, and generating feedback for the
entire codebase was an important part of the daily build.
That feedback process, however, was very much tuned for that application.
For Glean, I wanted to generalize the ideas, start simple and grow.
</p>
</div>
</div>

<div class="faq">
<div class="question">
<p>
My reports for Emma/Cobertura/JDepend/JUnitReport didn't run. What's wrong?
</p>
</div>

<div class="answer">
<p>
Some of the tools that Glean runs work against artifacts of a build, such as
.class files or test output. If the project directory that Glean is pointed to
doesn't have these artifacts, the tools skip over them.
</p>
</div>
</div>

</section>
</body>
</document>
