<?xml version="1.0" encoding="UTF-8"?>
<document>

  <properties>
    <author email="john@jbrugge.com">John Brugge</author>
    <title>Glean : Documentation</title>
  </properties>

<body>
<section name="Using Glean">
<p>Glean needs to know only a few things to do most of its work:</p>
<ul>
<li>the location of the project files (source, binary and
libraries, if any)</li>
<li>which feedback tools to run</li>
</ul>
<p>Being Ant scripts, all of the config is done using properties, and the easiest
way to override properties for a project is usually to put them in a properties file.
To tell Glean about your project, copy the <code>template/sample.feedback.properties</code>
file to any place you like and edit it.
</p>
<p>
You run Glean by pointing it at that file
<pre>
cd /path/to/glean
ant -Dfeedback.properties=/path/to/myfeedback.properties
</pre>
The output will be, by default, in your project's folder, under a <code>glean</code> folder.
That location is one of the values you can override in your properties file.
Browse to the <code>index.html</code> and you should see a summary page with links
to each of the reports.
</p>
</section>
<section name="Publishing The Results">
<p>
The results will be generated as subdirectories under the root defined above,
one subdirectory per tool. You can copy the files to a documentation area of a 
simple web server to be served up for your team.
</p>
<p>
There are a couple of targets available for handling the results as a WAR.
The <code>dist</code> target will package all of them up as a WAR
that can be deployed to a simple servlet engine. The <code>deploy</code> target
will copy this WAR to the location defined by the <code>report.deploy.dir</code>
property. Override this in your project's <code>myproject.feedback.properties</code>
file to point to the deploy area of your application server or servlet engine.
</p>
</section>
<section name="Configuration">
<p>The basic setup of Glean assumes a simple project structure, but
many other structures can be handled by adjusting properties that are used. The
key properties are in the file <code>feedback.properties</code>.
Rather than change the values there, though, you can follow the rules
of Ant property overrides to change the values. 
</p>
<p>
Glean will look for properties files at a number of different levels.
This lets you decide how broadly you want the changes to apply for your setting.
The list here is the order in which the properties are applied, so to override
properties, define them at a place lower in the list.
</p>
<table class="bodyTable">
<th>Property settings</th><th>When to use them</th>
<tr>
<td>specified on the command-line with <code>-Dproperty=value</code></td>
<td>To define an override for this one invocation.</td>
</tr>
<tr>
<td>from file specified by
<code>-Dfeedback.properties=/path/to/my.project.properties</code></td>
<td>For settings specific to <code>myproject</code>.
<span id="emphasis">This is the preferred place to put your project settings.</span></td>
</tr>
<tr>
<td><code>myproject/feedback.properties.local</code></td>
<td>For general settings for Glean unique to <code>myproject</code> <em>and</em> a particular local install</td>
</tr>
<tr>
<td><code>myproject/feedback.properties</code></td>
<td>For general settings for Glean unique to <code>myproject</code>.</td>
</tr>
<tr>
<td><code>${glean.home}/tool/(tool dir)/tool.override.properties.local</code></td>
<td>For settings specific to this tool for this installation which should
override default settings in <code>feedback.properties</code>.</td>
</tr>
<tr>
<td><code>${glean.home}/tool/(tool dir)/tool.override.properties</code></td>
<td>For settings specific to this tool. Override them in your project properties file or in
<code>tool.override.properties.local</code>.</td>
</tr>
<tr>
<td><code>${glean.home}/feedback.properties.local</code></td>
<td>For settings general settings for
Glean unique to a particular local install, and that you want to apply to all projects.
<span id="emphasis">This is the preferred place to put settings that you want
to apply to all of your projects. For instance, you might define
<code>tool.pattern</code> here so that all projects run the same set of scripts.</span>
</td>
</tr>
<tr>
<td><code>${glean.home}/feedback.properties</code></td>
<td>These are general settings for Glean that define the default behavior.</td>
</tr>
<tr>
<td><code>${glean.home}/tool/(tool dir)/tool.extend.properties.local</code></td>
<td>For settings specific to this tool for this installation which need to be
defined in terms of properties set in <code>feedback.properties</code>.</td>
</tr>
<tr>
<td><code>${glean.home}/tool/(tool dir)/tool.extend.properties</code></td>
<td>For settings specific to this tool. Override them in your project properties file or in
<code>tool.extend.properties.local</code>.</td>
</tr>
</table>
</section>

<section name="Properties">
<a name="properties"/>
<p>
There are a number of common properties that Glean makes available to all scripts,
such as the source file locations or the directory to hold tool output.
There are also properties specific to individual scripts; those are described
on the <a href="./tools.html">tools</a> page.
</p>
<p>
You can override any of these values using one of the mechanisms described above.
Having multiple levels of properties files can sometimes make setting values
tricky, particular when they are defined in terms of other properties.
In general, the less you need to depend on other properties in your overrides,
the better off you will be.
</p>
<p>
Here is the contents of the <code>feedback.properties</code> file. This is the
last properties file read, so it provides the default values when nothing else
is specified.
<pre>
#######################################################
#
#     Glean properties used for overall processing
#
#######################################################

# You can define the tools to run using an Ant pattern, either a '*' for all,
# or a comma-separated list of individual tools.
# For a list of available tools, look in ${glean.home}/tool, 
# or run 'ant list-tools'
# The default set of tools is just a starting point for basic feedback.
tool.pattern        = java2html14,javadoc,javancss,pmd

# The base of the target project should be defined as an absolute path
project.root        = ${basedir}

# The base of the Glean scripts is used in order to refer to other elements
# of the framework
feedback.script.dir = ${basedir}

# The default name of the source project will be the last directory found in the
# project.root path. For example, if ${project.root} = /path/to/myproject, then
# ${src.project.name} will be 'myproject'.
# If you want a more descriptive name, define it here
#src.project.name   = MyProjectName

# Override this property to change the location of the output
gen.report.root     = ${project.root}/glean

# Override this property too change the location of the tool logs
glean.log.dir       = ${feedback.script.dir}/logs

# Properties defining the report summary page
project.report.stylesheet = ${feedback.script.dir}/feedback-summary.xsl
project.report.summary    = ${gen.report.root}/feedback-summary.xml
project.report.page       = ${gen.report.root}/index.html

# Define the styles available to all of the reports
report.css          = ${feedback.script.dir}/reports.css

# Timestamp format used for reports and logs
tool.timestamp.format     = MM-dd-yyyy hh:mm:ss a

# The output will be packaged into a WAR for easy deployment. Use this property
# to change where you want the WAR built or sent.
report.war.dir      = ${feedback.script.dir}/target

# You can also override the name of the packaged WAR. It is defined by default
# in the build script since it uses the src.project.name, which may not be defined
# at this point.
#report.war.file     = ${src.project.name}-feedback.war

# Override this property to change the location for WAR deployment 
report.deploy.dir   = ${tomcat.home}/webapps

####################################################
#
#     Properties used by the individual reports
#
####################################################

# Default locations for source, binary, and tools
src.dir             = ${project.root}/src
bin.dir             = ${project.root}/bin
lib.dir             = ${project.root}/lib

# Default properties for an individual report.
gen.report.dir      = ${gen.report.root}/${ant.project.name}
report.name         = ${src.project.name}-${ant.project.name}-feedback
styled.report.name  = index
report.format       = xml
report.stylesheet   = ${ant.project.name}.xsl
index.page          = ${styled.report.name}.html

# If your source is JDK 1.5-compliant, change this
# in your project's feedback.properties file.
source.level        = 1.4

# Point this to whichever Java-to-HTML tool you have chosen
# Certain tools can use this to point their results to specific
# source files (e.g. PMD and CPD)
src.link.prefix     = ../java2html14

# Default locations for test code
test.src.dir        = ${project.root}/test-src
test.bin.dir        = ${bin.dir}
test.lib.dir        = ${lib.dir}
test.report.dir     = ${gen.report.dir}/tests
test.results.pattern= TEST-*.xml
unit.test.pattern           = **/test/*Test.class
integration.test.pattern    = **/test/integration/*Test.class

report.debug        = false
# These are documentation properties for the tools. 
# Each tool script should override these.
tool.description    = 'NO DESCRIPTION AVAILABLE'
tool.min.jdk        = 1.4
tool.dependencies   = None
tool.url            =
</pre>
</p>
</section>

<section name="Selecting Tools To Use">
<p>The <code>tool.pattern</code> property determines which tools are run.
It's value is a <a href="http://ant.apache.org/manual/dirtasks.html#patterns">standard Ant glob pattern</a>. 
You can either use "*" to mean all tools, or
you can list them individually, separated by commas. 
The default pattern is to run a small subset of the tools available.
</p>
<p>
If you were mostly interested in documentation, for example, you might define
these reports.
</p>
<pre>tool.pattern=beandoc,doccheck,javadoc,java2html</pre>
<p>
If you wanted to run all of the tools available, you would just specify a '*'.
</p>
<pre>tool.pattern=*</pre>
</section>
<section name="Changing the report look">
<p>Many of the reports use a stylesheet called <code>reports.css</code>. 
Change this in any way that you want. It is based on a number of styles from the 
standard stylesheets that come with Ant.
</p>
</section>
</body>
</document>
